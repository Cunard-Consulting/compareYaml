openapi: 3.0.1
info:
  title: Session Dialogue
  description: This service domain handles/structures the customer narrative during an interactive session. It consolidates and presents pertinent customer information and provides servicing guidelines with standard dialogue/scripting as appropriate. It can include the capability to provoke questions to capture key relationship and sales triggers. It also ensures the correct sequencing, dialogue content and actions are performed/initiated during the customer interaction. It may further leverage the session by passing on customer notifications, status updates and triggering sales/marketing efforts.
  contact:
    name: BIAN
    url: https://bian.org
  version: 13.0.0
servers:
  - url: https://virtserver.swaggerhub.com/B154/BIAN/SessionDialogue/13.0.0
paths:
  /SessionDialogue/Initiate:
    post:
      tags:
        - CR - DialogueSessionProcedure
      summary: Initiate Dialogue Session Procedure
      description: Initiate Dialogue Session Procedure
      operationId: Initiate
      requestBody:
        $ref: '#/components/requestBodies/DialogueSessionProcedure'
      responses:
        '200':
          $ref: '#/components/responses/DialogueSessionProcedure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /SessionDialogue/{sessiondialogueid}/Retrieve:
    get:
      tags:
        - CR - DialogueSessionProcedure
      summary: Retrive Dialogue Session Procedure
      description: Retrive Dialogue Session Procedure
      operationId: Retrieve
      parameters:
        - $ref: '#/components/parameters/sessiondialogueid'
      responses:
        '200':
          $ref: '#/components/responses/DialogueSessionProcedure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /SessionDialogue/{sessiondialogueid}/ProductorServiceInvocation/Initiate:
    post:
      tags:
        - BQ - ProductorServiceInvocation
      summary: Initiate Product or Service Invocation
      description: Initiate Product or Service Invocation
      operationId: InitiateProductorServiceInvocation
      parameters:
        - $ref: '#/components/parameters/sessiondialogueid'
      requestBody:
        $ref: '#/components/requestBodies/ProductorServiceInvocation'
      responses:
        '200':
          $ref: '#/components/responses/ProductorServiceInvocation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /SessionDialogue/{sessiondialogueid}/ProductorServiceInvocation/{productorserviceinvocationid}/Retrieve:
    get:
      tags:
        - BQ - ProductorServiceInvocation
      summary: Retrive Product or Service Invocation
      description: Retrive Product or Service Invocation
      operationId: RetrieveProductorServiceInvocation
      parameters:
        - $ref: '#/components/parameters/sessiondialogueid'
        - $ref: '#/components/parameters/productorserviceinvocationid'
      responses:
        '200':
          $ref: '#/components/responses/ProductorServiceInvocation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    HTTPError:
      type: object
      properties:
        status_code:
          type: string
          format: string
          example: '404'
        status:
          type: string
          format: string
          example: 503 Service Unavailable
        message:
          type: string
          format: string
          example: Resource not found
      description: Status Attributes
    datetimetypevalues:
      enum:
        - MaturityDate
        - InitiatedDate
        - RequestedDate
        - ExecutedDate
        - OpenDate
        - CloseDate
        - ExpiryDate
        - EffectiveDate
        - CreatingDate
        - ActivationDate
        - DeactivationDate
        - BlockingDate
        - SendingDate
        - ValidFromDate
        - ValidToDate
        - ReceivingDate
        - SigningDate
        - DueDate
        - ValueDate
        - FulfillmentDate
      type: string
      description: ">\r\n* `MaturityDate` - \r\n* `InitiatedDate` - \r\n* `RequestedDate` - \r\n* `ExecutedDate` - \r\n* `OpenDate` - \r\n* `CloseDate` - \r\n* `ExpiryDate` - \r\n* `EffectiveDate` - \r\n* `CreatingDate` - \r\n* `ActivationDate` - \r\n* `DeactivationDate` - \r\n* `BlockingDate` - \r\n* `SendingDate` - \r\n* `ValidFromDate` - \r\n* `ValidToDate` - \r\n* `ReceivingDate` - \r\n* `SigningDate` - \r\n* `DueDate` - \r\n* `ValueDate` - \r\n* `FulfillmentDate` - \r\n"
    datetime:
      type: object
      properties:
        DateTimeContent:
          type: string
          description: The particular date and time point in the progression of time
          format: text
          example: '2023-10-23T14:30:00Z'
        TimeZoneCode:
          type: string
          description: The time zone to which the date time refers.
          format: text
          example: America/New_York
        DaylightSavingIndicator:
          type: string
          description: ''
          format: text
          example: DST_ON
        DateTimeType:
          $ref: '#/components/schemas/datetimetypevalues'
      description: The exact timestamp when the dialogue session is concluded (e.g., call ends, chat closed, portal session terminated). ISODateTime|ISODateTime (https://www.iso20022.org/standardsrepository/type/ISODateTime)|Standard|ISO20022 BM ()
    identifier:
      type: object
      properties:
        IdentifierValue:
          type: string
          description: tThe actual unique code or number (e.g., passport number, drivers license number).
          format: value
          example: X12345678
        IdentifierIssuingAuthority:
          type: string
          description: |-
            Entity that assigns and manages the identification.
            the organization or agency that issued the identifier (e.g., DMV, Passport Office).
          format: text
          example: DMV
        IdentifierStartDate:
          $ref: '#/components/schemas/datetime'
        IdentifierEndDate:
          $ref: '#/components/schemas/datetime'
      description: A unique identifier assigned to each Dialogue Session to distinguish it from all other sessions. Used for tracking, retrieval, and linking with customer and business activity records. GenericIdentification|GenericIdentification (https://www.iso20022.org/standardsrepository/type/GenericIdentification)|Standard|ISO20022 BM ()
    productagreementtypevalues:
      enum:
        - CurrentAccountAgreement
        - SavingsAccountAgreement
        - BrokeredProductAgreement
        - ConsumerLoanAgreement
        - MortgageLoanAgreement
        - DirectDebitServiceAgreement
        - TermDepositAgreement
      type: string
      description: ">\r\n* `CurrentAccountAgreement` - \r\n* `SavingsAccountAgreement` - \r\n* `BrokeredProductAgreement` - \r\n* `ConsumerLoanAgreement` - \r\n* `MortgageLoanAgreement` - \r\n* `DirectDebitServiceAgreement` - \r\n* `TermDepositAgreement` - \r\n"
    actiontypevalues:
      enum:
        - Initiate
        - Execute
        - Create
        - Transfer
        - Pay
        - Deliver
        - Apply
        - Calculate
      type: string
      description: ">\r\n* `Initiate` - \r\n* `Execute` - \r\n* `Create` - \r\n* `Transfer` - \r\n* `Pay` - \r\n* `Deliver` - \r\n* `Apply` - \r\n* `Calculate` - \r\n"
    action:
      type: object
      properties:
        ActionType:
          $ref: '#/components/schemas/actiontypevalues'
      description: Tasks executed during the session, such as processing service requests, placing orders, delivering notifications, or updating customer data. |||
    ProductorServiceInvocation:
      type: object
      properties:
        ProductorServiceInvocationIdentification:
          $ref: '#/components/schemas/identifier'
        ProductorServiceInvocationProductorServiceReference:
          type: string
          description: |-
            Reference to specific instance of the product/service to operate on.

            Directs the action to the product instance
          format: text
          example: product-1234567890
        ProductorServiceInvocationProductorServiceType:
          $ref: '#/components/schemas/productagreementtypevalues'
        ProductorServiceInvocationRequestedAction:
          $ref: '#/components/schemas/action'
        ProductorServiceInvocationActionParameters:
          type: string
          description: |-
            Input values for the requested action

            Provides all necessary details for execution e.g., amount, recipient, date, payment method, or other service-specific inputs.
          format: text
          example: amount=100&recipient=example@example.com&date=2023-10-25&payment_method=credit_card
        DialogueSessionProcedureIdentification:
          $ref: '#/components/schemas/identifier'
        ProductorServiceInvocationRequestedActionResult:
          type: string
          description: |-
            Result of the requested action

            To return structured results to the customer session for display, communication, or next-step decisioning.
          format: text
          example: action-successfully-completed
      description: |-
        This is the step in the Dialouge Session procedure where the session executes actions or retrieves data related to the customers requested products or services.


        ** General comment **
        The Product or Service invocation BQ, having confirmed that the party has the authority and has been authentication will present service access available to a selected product or service. It is assumed that this will include displaying what kind of product services might be available for the customer/party to select from.
    duration:
      type: object
      properties:
        Duration:
          type: string
          description: A duration is the specification of a length of time without a fixed start or end time, expressed in Gregorian calendar time units (Year, Month, Week, Day) and Hours, Minutes or Seconds. (UN/CEFACT)
          format: datatype
          example: P2Y3M5DT12H30M45S
      description: The total elapsed time of the session, typically calculated as the difference between End Time and Start Time (may also include idle/hold time if relevant). Duration|Duration (https://www.iso20022.org/standardsrepository/type/duration)|Standard|ISO20022 BM ()
    datetimeperiod:
      type: object
      properties:
        FromDateTime:
          $ref: '#/components/schemas/datetime'
        ToDateTime:
          $ref: '#/components/schemas/datetime'
      description: Period of time during which the status is valid.
    name:
      type: object
      properties:
        Name:
          type: string
          description: A name is a word or phrase that constitutes the distinctive designation of a person, place, thing or concept. (UN/CEFAT)
          format: datatype
          example: Sophia Johnson
      description: |
        Name by which a party is known and which is usually used to identify that party. (ISO20022)
    partytypevalues:
      enum:
        - Person
        - Organisation
      type: string
      description: ">\r\n* `Person` - Human entity, as distinguished from a corporate entity (which is sometimes referred to as an 'artificial person'). ISO20022\r\n* `Organisation` - Organised structure that is set up for a particular purpose. For example, a business, government body, department, charity, or financial institution. ISO20022\r\n"
    partyidentificationtypevalues:
      enum:
        - Taxidentificationnumber
        - Nationalregistrationnumber
        - Registrationauthorityidentification
        - LEI(LegalEntityIdentifier)
        - Alienregistrationnumber
        - Passportnumber
        - Taxexemptidentificationnumber
        - Corporateidentification
        - Driverlicensenumber
        - Foreigninvestmentidentitynumber
        - Socialsecuritynumber
        - Identitycardnumber
        - Concat
        - Nationalregistrationidentificationnumber
      type: string
      description: ">\r\n* `Taxidentificationnumber` - Number assigned by a tax authority to an entity.\r\n* `Nationalregistrationnumber` - Number assigned by a national registration authority to an entity. In Singapore this is known as the NRIC. (ISO20022)\r\n* `Registrationauthorityidentification` - An identifier for the Legal Entity in a business registry in the jurisdiction of legal registration, or in the appropriate registration authority. (ISO20022)\r\n* `LEI(LegalEntityIdentifier)` - \r\n* `Alienregistrationnumber` - Number assigned by a government agency to identify foreign nationals.\r\n* `Passportnumber` - Number assigned by a passport authority.\r\n* `Taxexemptidentificationnumber` - Number assigned to a tax exempt entity.\r\n* `Corporateidentification` - Number assigned to a corporate entity.\r\n* `Driverlicensenumber` - Number assigned to a driver's license.\r\n* `Foreigninvestmentidentitynumber` - Number assigned to a foreign investor (other than the alien number).\r\n* `Socialsecuritynumber` - Number assigned by a social security agency.\r\n* `Identitycardnumber` - Number assigned by a national authority to an identity card.\r\n* `Concat` - Number assigned by an issuer to identify a customer via the concatenation of the birthdate and characters of the first name and surname.\r\n* `Nationalregistrationidentificationnumber` - National registration identification number. In Singapore this is known as the NRIC.\r\n"
    partyidentification:
      type: object
      properties:
        PartyIdentificationType:
          $ref: '#/components/schemas/partyidentificationtypevalues'
        PartyIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    partylegalstructuretypevalues:
      enum:
        - Individual
        - CommunityInterestCompany
        - CharitableIncorporatedOrganisation
        - Co-Operative
        - Charity
        - GeneralPartnership
        - LimitedLiabilityPartnership
        - ScottishLimitedPartnership
        - LimitedPartnership
        - PrivateLimitedCompany
        - PublicLimitedCompany
        - Sole(SoleTrader)
      type: string
      description: ">\r\n* `Individual` - \r\n* `CommunityInterestCompany` - \r\n* `CharitableIncorporatedOrganisation` - \r\n* `Co-Operative` - \r\n* `Charity` - \r\n* `GeneralPartnership` - \r\n* `LimitedLiabilityPartnership` - \r\n* `ScottishLimitedPartnership` - \r\n* `LimitedPartnership` - \r\n* `PrivateLimitedCompany` - \r\n* `PublicLimitedCompany` - \r\n* `Sole(SoleTrader)` - \r\n"
    industrycode:
      type: object
      properties:
        Industrycode:
          type: string
          description: Code to identify economic activities by ISIC (United Nations International Standard Industrial Classification of all Economic Activities).
          format: datatype
          example: '4711'
      description: Economical activity of Party (ISO20022)
    party:
      type: object
      properties:
        PartyName:
          $ref: '#/components/schemas/name'
        PartyType:
          $ref: '#/components/schemas/partytypevalues'
        PartyDateTime:
          $ref: '#/components/schemas/datetime'
        PartyIdentification:
          $ref: '#/components/schemas/partyidentification'
        PartyLegalStructureType:
          $ref: '#/components/schemas/partylegalstructuretypevalues'
        PartyActivityIndicator:
          $ref: '#/components/schemas/industrycode'
      description: ''
    partyinvolvementtypevalues:
      enum:
        - AgreementInvolvement
        - PartyInvolvement
        - ArrangementInvolvement
        - DesignSpecificationInvolvement
        - RelationshipInvolvement
        - LocationInvolvement
        - BankGuaranteeInvolvement
      type: string
      description: ">\r\n* `AgreementInvolvement` - \r\n* `PartyInvolvement` - \r\n* `ArrangementInvolvement` - \r\n* `DesignSpecificationInvolvement` - \r\n* `RelationshipInvolvement` - \r\n* `LocationInvolvement` - \r\n* `BankGuaranteeInvolvement` - \r\n"
    partyrole:
      type: object
      properties:
        PartyRoleType:
          type: string
          description: ''
          format: text
          example: customer
        PartyRoleName:
          $ref: '#/components/schemas/name'
        PartyRoleValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PartyInvolvementType:
          $ref: '#/components/schemas/partyinvolvementtypevalues'
      description: ''
    involvedparty:
      type: object
      properties:
        PartyReference:
          $ref: '#/components/schemas/party'
        PartyInvolvement:
          $ref: '#/components/schemas/partyrole'
      description: Party who plays a  specific role in the context of assigning a status.
    status:
      type: object
      properties:
        StatusReason:
          type: string
          description: Specifies the reasons for the status.
          format: text
          example: processing-delay
        StatusDateTime:
          $ref: '#/components/schemas/datetime'
        StatusValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        StatusInvolvedParty:
          $ref: '#/components/schemas/involvedparty'
      description: |-
        Indicates whether the customers identity has been successfully verified (e.g., authenticated, partially verified, not verified).

        Comment: 
        Note that the authentication level may be elevated during the interaction if needed, with the Contact Handler initiating Party Authentication.  Status |Status  (https://www.iso20022.org/standardsrepository/type/Status)|Standard|ISO20022 BM ()
    channeltypevalues:
      enum:
        - CommunicationChannel
        - AuthenticationChannel
      type: string
      description: ">\r\n* `CommunicationChannel` - \r\n* `AuthenticationChannel` - \r\n"
    channel:
      type: object
      properties:
        ChannelType:
          $ref: '#/components/schemas/channeltypevalues'
      description: |-
        The communication medium through which the customer interacts with the enterprise during the session. Examples include voice call, chat, email, social media message, or self-service portal.

        Comment:
        A contact could include many sessions which could use different channels and devices. |||
    deviceidentificationtypevalues:
      enum:
        - IMEI
        - Serialnumber
        - Secureelementidentification
        - Othernational
        - Otherprivate
      type: string
      description: ">\r\n* `IMEI` - International Mobile Equipment Identity.\r\n* `Serialnumber` - Device serial number.\r\n* `Secureelementidentification` - Secure element ID.\r\n* `Othernational` - Other nationally assigned code.\r\n* `Otherprivate` - Other privately assigned code.\r\n"
    deviceidentification:
      type: object
      properties:
        DeviceIdentification:
          $ref: '#/components/schemas/identifier'
        DeviceIdentificationType:
          $ref: '#/components/schemas/deviceidentificationtypevalues'
      description: ''
    devicetypevalues:
      enum:
        - Securecardreader
        - Nonsecurecardreader
        - Mobile
        - Tablet
        - Personalcomputer
        - Othernational
        - Otherprivate
        - Wearable
        - Vehicle
        - Embedded
        - Keyfob
        - Jewellery
        - Sticker
        - Gamingdevice
        - Watch
        - Unknown
        - BiometricDevice
      type: string
      description: ">\r\n* `Securecardreader` - Secure card reader attached to the customer device\r\n* `Nonsecurecardreader` - Non-secure card reader attached to the customer device.\r\n* `Mobile` - Mobile phone\r\n* `Tablet` - Tablet\r\n* `Personalcomputer` - Personal computer\r\n* `Othernational` - Other device defined at national level\r\n* `Otherprivate` - Other device defined in a private way.\r\n* `Wearable` - Wearable device.\r\n* `Vehicle` - Vehicle.\r\n* `Embedded` - Embedded in a device.\r\n* `Keyfob` - Key Fob\r\n* `Jewellery` - Jewellery\r\n* `Sticker` - Sticker\r\n* `Gamingdevice` - Gaming Device\r\n* `Watch` - Watch\r\n* `Unknown` - Device type unknown\r\n* `BiometricDevice` - A biometric device is a security identification and authentication device. Such devices use automated methods of verifying or recognising the identity of a living person based on a physiological or behavioral characteristic.\nhttps://en.wikipedia.org/wiki/Biometric_device\n\r\n"
    deviceoperatingsystemtypevalues:
      enum:
        - Android
        - Ios
        - Windows
        - Blackberry
        - Tizen
        - Othernational
        - Otherprivate
      type: string
      description: ">\r\n* `Android` - Android operating system.\r\n* `Ios` - iOS operating system.\r\n* `Windows` - Windows operating system.\r\n* `Blackberry` - Blackberry operating system.\r\n* `Tizen` - Tizen operating system.\r\n* `Othernational` - Other nationally defined code.\r\n* `Otherprivate` - Other privately defined code.\r\n"
    device:
      type: object
      properties:
        DeviceIdentification:
          $ref: '#/components/schemas/deviceidentification'
        DeviceType:
          $ref: '#/components/schemas/devicetypevalues'
        DeviceProperty:
          type: string
          description: |
            Property of a device relevant for its use.

            A device has the characteristics of the device type it belongs to,possibly specified
            e.g. . a device of the type "cheque book" will have cheques. The device specifies how many and what the number range is.
            e.g. an electronic banking app consists of software modules, the device specifies what version 
          format: text
          example: version-1.2.3
        DeviceElement:
          type: string
          description: |-
            An element of the device that can be used independently and is individually identified

            e.g. a cheque in a chequebook
          format: text
          example: keyboard-backlit
        DeviceStatus:
          $ref: '#/components/schemas/status'
        DeviceVersion:
          type: string
          description: ''
          format: number
          example: 2.0.1
        DeviceDateTime:
          $ref: '#/components/schemas/datetime'
        DeviceDescription:
          type: string
          description: ''
          format: text
          example: Bluetooth-enabled smart thermostat designed for home automation and remote climate control
        DeviceName:
          $ref: '#/components/schemas/name'
        DeviceLanguage:
          type: string
          description: Preferred language set on the device
          format: text
          example: en-US
        DevicePhoneNumber:
          type: string
          description: Phone number associated with the device.
          format: text
          example: '+12345678901'
        DeviceLocationReference:
          type: string
          description: Reference to Geographical Location of the device.
          format: text
          example: 37.7749° N, 122.4194° W
        DeviceManufacturer:
          type: string
          description: Manufacturer of the device.
          format: text
          example: Samsung
        DeviceCountryReference:
          type: string
          description: Reference to Country of the location.
          format: text
          example: Germany
        DeviceAddressReference:
          type: string
          description: Reference to the address associated with the device like Internet Protocol address, email Address
          format: text
          example: 192.168.1.1
        DeviceOperatingSystem:
          $ref: '#/components/schemas/deviceoperatingsystemtypevalues'
      description: |-
        The hardware or endpoint the customer uses to participate in the session, such as mobile phone, desktop/laptop, tablet, or IVR (interactive voice response) system.

        Comment:
        A contact could include many sessions which could use different channels and devices. |||
    log:
      type: object
      properties:
        LogType:
          type: string
          description: ''
          format: text
          example: error
        LogPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        LogDate:
          $ref: '#/components/schemas/datetime'
        LogIdentification:
          $ref: '#/components/schemas/identifier'
      description: A complete record of the conversation during the session, including chat messages, call notes, emails, or any other exchanged content. It captures both customer and agent/bot contributions for reference, analysis, and compliance. |||
    dialoguesessionrequestedactionoutcomestatustypevalues:
      enum:
        - Success
        - Pending
        - Requires_Authentication
        - Requires_Approval
        - Failed_Validation
        - Failed_Authentication
        - Rejected
        - Cancelled
        - Error_System
        - Error_Unknown
      type: string
      description: The results of these actions, including session resolution status (resolved, pending, escalated), customer satisfaction, and any triggers for future interactions. |||
    DialogueSessionProcedure:
      type: object
      properties:
        DialogueSessionProcedureIdentification:
          $ref: '#/components/schemas/identifier'
        DialogueSessionIdentification:
          $ref: '#/components/schemas/identifier'
        DialogueSessionStartDate:
          $ref: '#/components/schemas/datetime'
        DialogueSessionEndDate:
          $ref: '#/components/schemas/datetime'
        DialogueSessionDuration:
          $ref: '#/components/schemas/duration'
        DialogueSessionStatus:
          $ref: '#/components/schemas/status'
        DialogueSessionCustomerorContactPartyReference:
          type: string
          description: Reference to Party who is a specific customer or contact party in session
          format: text
          example: CUST-12345
        DialogueSessionAuthenticationStatus:
          $ref: '#/components/schemas/status'
        DialogueSessionChannelUsed:
          $ref: '#/components/schemas/channel'
        DialogueSessionDeviceUsed:
          $ref: '#/components/schemas/device'
        CustomerContactSessionChannelTransitionsReference:
          $ref: '#/components/schemas/log'
        DialogueSessionLog:
          $ref: '#/components/schemas/log'
        DialogueSessionIntentsDetected:
          type: string
          description: The purpose, need, or goal identified from the customer’s inputs during the session. Examples include request for information, complaint, order placement, or troubleshooting. This is typically determined using structured forms, NLP (natural language processing), or agent recognition.
          format: text
          example: order placement
        DialogueSessionActions:
          $ref: '#/components/schemas/action'
        DialogueSessionOutcomes:
          $ref: '#/components/schemas/dialoguesessionrequestedactionoutcomestatustypevalues'
        DialogueSessionAgentReference:
          type: string
          description: Reference to Party (human or even virtual agent/bot) managing the session.
          format: text
          example: virtual-agent-001
        CustomerContactReference:
          type: string
          description: |-
            Reference to the Customer Contact witch launches a Session Dialogue 

            Comment: Customer Handler SD is responsible to manage the Customer Contact. 
          format: text
          example: customer-contact-12345
      description: ''
  responses:
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    NotFound:
      description: NotFound
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    TooManyRequests:
      description: TooManyRequests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    InternalServerError:
      description: InternalServerError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    DialogueSessionProcedure:
      description: DialogueSessionProcedure
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DialogueSessionProcedure'
    ProductorServiceInvocation:
      description: ProductorServiceInvocation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProductorServiceInvocation'
  parameters:
    sessiondialogueid:
      name: sessiondialogueid
      in: path
      required: true
      style: simple
      schema:
        type: string
    productorserviceinvocationid:
      name: productorserviceinvocationid
      in: path
      required: true
      style: simple
      schema:
        type: string
  requestBodies:
    DialogueSessionProcedure:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DialogueSessionProcedure'
      required: true
    ProductorServiceInvocation:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProductorServiceInvocation'
      required: true
